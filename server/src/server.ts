import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import net from 'net';
import { MONGO_URI } from './config/config';
import appRoutes from './routes/appRoutes';

dotenv.config();

const app = express();

// üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
app.use(cors({
    origin: [
        "http://localhost:3000", // –§—Ä–æ–Ω—Ç–µ–Ω–¥
        "http://localhost:3001", // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    ],
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization'],
}));

// üõ† –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç `body` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.use(express.json({ limit: "5mb" }));
app.use(express.urlencoded({ extended: true, limit: "5mb" }));

// üîç –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.use((req, res, next) => {
    console.log(`[${req.method}] ${req.url}`, req.body);
    next();
});

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–æ–≤ CORS
app.options("*", cors());

// üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api', appRoutes);

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞
function isPortInUse(port: number): Promise<boolean> {
    return new Promise((resolve, reject) => {
        const server = net.createServer()
            .once('error', (err: any) => {
                if (err.code === 'EADDRINUSE') {
                    resolve(true); // –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç
                } else {
                    reject(err); // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                }
            })
            .once('listening', () => {
                server.close();
                resolve(false); // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            })
            .listen(port);
    });
}

// üîç –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
const preferredPorts = [
    Number(process.env.PORT) || 5001,
    5002,
    5003
];

async function choosePort(): Promise<number> {
    for (let port of preferredPorts) {
        try {
            if (!(await isPortInUse(port))) {
                process.env.PORT = String(port); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç
                return port;
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ ${port}:`, error);
        }
    }
    throw new Error('‚ùå –í—Å–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã!');
}

// üîó API Config (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è URL API)
app.get('/api/config', (req, res) => {
    const API_URL = `${req.protocol}://${req.get('host')}/api`; // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π API URL
    res.json({ API_URL });
});

// ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
    res.status(404).json({ message: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
    console.error('‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
mongoose.connect(MONGO_URI)
    .then(async () => {
        console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');

        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        const port = await choosePort();
        app.listen(port, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:${port}`));
    })
    .catch(err => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
        process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    });
