import { Request, Response } from "express";
import Order from "../../models/Order";

const getAllOrders = async (req: Request, res: Response): Promise<void> => {
    try {
        const { page = 1, limit = 10 } = req.query;

        const orders = await Order.find()
            .populate("user")
            .skip((+page - 1) * +limit)
            .limit(+limit);
        const totalOrders = await Order.countDocuments();

        res.status(200).json({
            totalOrders,
            orders: orders.map((order) => ({
                ...order.toObject(),
                novaPoshtaBranchDetails: order.novaPoshtaBranchDetails || {},
            })),
            page: +page,
            totalPages: Math.ceil(totalOrders / +limit),
        });
    } catch (error) {
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å" });
    }
};

const getOrderById = async (req: Request, res: Response): Promise<void> => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId).populate("user");
        if (!order) {
            res.status(404).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
            return;
        }

        res.status(200).json({
            ...order.toObject(),
            novaPoshtaBranchDetails: order.novaPoshtaBranchDetails || {},
        });
    } catch (error) {
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
    }
};

// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const updateOrderStatus = async (req: Request, res: Response): Promise<void> => {
    try {
        const { orderId } = req.params;
        const { status } = req.body;

        if (!["pending", "shipped", "delivered", "canceled"].includes(status)) {
            res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å" });
            return;
        }

        const order = await Order.findById(orderId);
        if (!order) {
            res.status(404).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
            return;
        }

        order.status = status;
        await order.save();

        res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ" });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
    }
};

// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è)
const updateOrder = async (req: Request, res: Response): Promise<void> => {
    try {
        const { orderId } = req.params;
        const updatedData = req.body; // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–∞–Ω—ñ

        const order = await Order.findById(orderId);
        if (!order) {
            res.status(404).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
            return;
        }

        Object.assign(order, updatedData);
        await order.save();

        res.status(200).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ", order });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
    }
};

const deleteOrder = async (req: Request, res: Response): Promise<void> => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId);

        if (!order) {
            res.status(404).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
            return;
        }

        await Order.findByIdAndDelete(orderId);
        res.status(200).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (error) {
        res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
    }
};

export { getAllOrders, getOrderById, updateOrderStatus, updateOrder, deleteOrder };
