import { Request, Response } from 'express';
import Category from '../../models/Category';

// ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
const createCategory = async (req: Request, res: Response): Promise<void> => {
    try {
        console.log('üîπ User from token:', req.user);

        const { name, image } = req.body;
        const userId = req.user?.userId;

        if (!userId) {
            res.status(400).json({ message: '‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ userId —É –∑–∞–ø–∏—Ç—ñ' });
            return;
        }

        if (!name || !image) {
            res.status(400).json({ message: '‚ùå –í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
            return;
        }

        const category = new Category({
            name,
            image,
            createdBy: userId
        });

        console.log('‚úÖ Creating category:', { name, createdBy: userId });

        await category.save();
        res.status(201).json(category);
    } catch (error) {
        console.error('‚ùå Error creating category:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', error: (error as Error).message });
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
const getCategories = async (req: Request, res: Response): Promise<void> => {
    try {
        const categories = await Category.find();
        res.status(200).json(categories);
    } catch (error) {
        console.error('‚ùå Error fetching categories:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π', error: (error as Error).message });
    }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID
const getCategoryById = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const category = await Category.findById(id);

        if (!category) {
            res.status(404).json({ message: '‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }

        res.status(200).json(category);
    } catch (error) {
        console.error('‚ùå Error fetching category:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', error: (error as Error).message });
    }
};

// ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
const updateCategory = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const { name, image } = req.body;

        if (!name || !image) {
            res.status(400).json({ message: '‚ùå –í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
            return;
        }

        const updatedCategory = await Category.findByIdAndUpdate(id, { name, image }, { new: true });

        if (!updatedCategory) {
            res.status(404).json({ message: '‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }

        res.status(200).json(updatedCategory);
    } catch (error) {
        console.error('‚ùå Error updating category:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', error: (error as Error).message });
    }
};

// ‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
const deleteCategory = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;

        const category = await Category.findById(id);
        if (!category) {
            res.status(404).json({ message: '‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }

        await Category.findByIdAndDelete(id);
        res.status(200).json({ message: '‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
        console.error('‚ùå Error deleting category:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó', error: (error as Error).message });
    }
};

export { createCategory, getCategories, getCategoryById, updateCategory, deleteCategory };
